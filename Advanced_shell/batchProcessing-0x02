#!/usr/bin/env bash
# fetch multiple pokemon
# fetch data from each of the selected pokemeon and save their data

set -euo pipefail

DATA_DIR="pokemon_data"
ERROR_LOG="errors.txt"
mkdir -p "$DATA_DIR"

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

BASE_URL="https://pokeapi.co/api/v2/pokemon"
MAX_RETRIES=3
DELAY=2  
RATE_LIMIT_DELAY=2 

#clear previous error
> "$ERROR_LOG"

for name in "${POKEMON_LIST[@]}"; do
  echo "Fetching data for ${name}..."
  OUT_FILE="${DATA_DIR}/${name}.json"

  success=false
  attempt=1

  #retry
  while [[ $attempt -le $MAX_RETRIES ]]; do
    response_code=$(curl -s -o "$OUT_FILE" -w "%{http_code}" "${BASE_URL}/${name}")

    if [[ "$response_code" -eq 200 ]]; then
      echo "Saved data to ${OUT_FILE}"
      success=true
      break
    else
      echo "Attempt $attempt failed (HTTP ${response_code}) for ${name}. Retrying in ${DELAY}s..."
      sleep "$DELAY"
      ((attempt++))
    fi
  done

  #log the error
  if [[ "$success" == false ]]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') ERROR: Failed to fetch data for ${name} after ${MAX_RETRIES} attempts (HTTP ${response_code})" >> "$ERROR_LOG"
    rm -f "$OUT_FILE"
    echo "Skipping ${name}"
  fi

  #delay to prevent rate limiting
  sleep "$RATE_LIMIT_DELAY"
done

echo ""
echo "Batch fetching complete."
echo "If any errors occurred, check the log file: $ERROR_LOG"
